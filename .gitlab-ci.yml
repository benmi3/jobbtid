# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
  - test
  - codescan-1
  - codescan-2
  - release 
test:
  stage: test
  image: golang:latest
  script:
    - go test -race -covermode=atomic -coverprofile=coverage.out ./...
  artifacts:
    # Save the coverage report file as an artifact
    paths:
      - coverage.out
    expire_in: 1 week
    when: always
#  allow_failure: true # temp

sast:
  stage: codescan-1
include:
- template: Security/SAST.gitlab-ci.yml

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
sonarcloud-check:
  stage: codescan-2
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - merge_requests
    - master
    - develop
    - main
    - dev


# Define variables used in the pipeline
variables:
  # Use Docker-in-Docker (DinD) service (requires runner with privileged mode)
  DOCKER_HOST: tcp://docker:2375
  # Disable Docker TLS verification for DinD
  DOCKER_TLS_CERTDIR: ""
  # Define the GoReleaser image to use
  GORELEASER_IMAGE: goreleaser/goreleaser:latest # Use a specific version tag in production

# Template for GoReleaser job
.goreleaser_job_template: &goreleaser_job
  stage: release
  image: $GORELEASER_IMAGE
  # Use Docker-in-Docker service to build Docker images
  services:
    - name: docker:dind # Docker-in-Docker
      alias: docker
  # Runs before the main script
  before_script:
    # Login to GitLab Container Registry using predefined CI variables
    # $CI_REGISTRY_USER, $CI_REGISTRY_PASSWORD, $CI_REGISTRY are provided by GitLab
    - echo "Logging into GitLab Container Registry..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    # Run GoReleaser.
    # --rm-dist automatically cleans the dist/ folder before building.
    # $GITLAB_TOKEN is read automatically by GoReleaser from the environment.
    - echo "Running GoReleaser..."
    - goreleaser release --rm-dist
  artifacts:
    # Optional: Keep build artifacts (binaries, archives, checksums) from the dist/ directory
    paths:
      - dist/
    expire_in: 1 week # Optional: How long to keep artifacts

# Job to run GoReleaser when a Git tag is pushed
release_tagged:
  <<: *goreleaser_job # Inherit from the template
  # Rules determine when the job runs
  rules:
    # Run ONLY when a Git tag is pushed (e.g., v1.0.0, v1.1.0-rc1)
    - if: $CI_COMMIT_TAG
